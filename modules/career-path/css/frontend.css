:root {
    --career-path-btn-bkg: #EBF5FF;
    --career-path-btn-hover: #497476
}

#filter-swap {
    display: block;
    max-width: 1350px;
    margin: 0 auto
}

#filter-swap .bigpic img {
    width: 100%
}

.filters-bar {
    position: relative;
    background-color: rgba(157, 162, 162, 0.3)
}

.filters-bar:before, .filters-bar:after {
    content: '';
    height: calc(100% - 2em);
    pointer-events: none;
    position: absolute;
    top: 1em;
    width: 10px;
    z-index: 2
}

.filters-bar:before {
    right: 0
}

.filters-bar:after {
    left: 0
}

.filters-bar ul {
    display: flex;
    flex-wrap: nowrap;
    overflow: auto;
    padding: 1em 0
}

.filters-bar ul li {
    padding: 0 8px;
    white-space: nowrap;
    list-style: none;
    font-size: 13px;
    font-weight: 700
}

.filters-bar ul li button, .filters-bar ul li button:visited {
    margin: 0 5px 3px 0;
    text-decoration: none;
    padding: 1px 12px;
    border-radius: 32px;
    font-size: 13px;
    font-weight: 500;
    background: #fff;
    border: 1px solid lightgrey;
    display: inline-block
}

.filters-bar ul li button:hover, .filters-bar ul li button:visited:hover {
    background: var(--career-path-btn-bkg);
    border-color: var(--career-path-btn-hover)
}

.filters-bar ul li button.curImage, .filters-bar ul li button:visited.curImage {
    border: 2px solid var(--career-path-btn-hover);
    padding: 0 11px
}

@media only screen and (min-width: 910px) {
    #filter-swap {
        max-width: 1550px;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center
    }

    #filter-swap :nth-child(1) {
        order: 1;
        flex-basis: 15%
    }

    #filter-swap :nth-child(2) {
        order: 2;
        flex-basis: 15%
    }

    #filter-swap :nth-child(3) {
        order: 3;
        flex-basis: 70%
    }

    .filters-bar {
        background-color: transparent
    }

    .filters-bar ul {
        display: inline-block
    }
}

@media only screen and (min-width: 1200px) {
    #filter-swap {
        max-width: 1550px
    }

    #filter-swap :nth-child(1) {
        order: 1;
        flex-basis: 15%
    }

    #filter-swap :nth-child(2) {
        order: 3;
        flex-basis: 15%
    }

    #filter-swap :nth-child(3) {
        order: 2;
        flex-basis: 70%
    }
}

/*# sourceURL=webpack://./frontend.scss */
/*# sourceURL=webpack://./../../../../../../lib/assets/scss/lib/_variables.scss */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */